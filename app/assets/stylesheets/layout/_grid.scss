/* Rows
========================================================================================= */

/* Create row
------------------------------------------------------------------------- */
@mixin create-row() {
    .row {
        margin-left: ceil(($grid-gutter / -2));
        margin-right: floor(($grid-gutter / -2));
        @include clearfix;
    }
}

/* Columns
========================================================================================= */

/* Create core for columns
------------------------------------------------------------------------- */
@mixin create-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list},
        .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
    }

    #{$list} {
        position: relative;
        min-height: 1px;
        padding-left: ceil(($grid-gutter / 2));
        padding-right: floor(($grid-gutter / 2));
    }
}

/* Loop through all columns and float according to class
------------------------------------------------------------------------- */
@mixin float-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .col-#{$class}-#{$i}";
    }

    #{$list} {
        float: left;
    }
}

/* Calculate column values per class and type
------------------------------------------------------------------------- */
@mixin calc-columns($index, $class, $type) {
    @if ($type == width) and ($index > 0) {
        .col-#{$class}-#{$index} {
            width: percentage(($index / $grid-columns));
        }
    }

    @if ($type == push) and ($index > 0) {
        .col-#{$class}-push-#{$index} {
            left: percentage(($index / $grid-columns));
        }
    }

    @if ($type == push) and ($index == 0) {
        .col-#{$class}-push-0 {
            left: auto;
        }
    }

    @if ($type == pull) and ($index > 0) {
        .col-#{$class}-pull-#{$index} {
            right: percentage(($index / $grid-columns));
        }
    }

    @if ($type == pull) and ($index == 0) {
        .col-#{$class}-pull-0 {
            right: auto;
        }
    }

    @if ($type == offset) {
        .col-#{$class}-offset-#{$index} {
            margin-left: percentage(($index / $grid-columns));
        }
    }
}

/* Loop through all columns and calculate values
------------------------------------------------------------------------- */
@mixin loop-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-columns($i, $class, $type);
    }
}


/* Create columns for media queries
========================================================================================= */

/* Create extra small columns
------------------------------------------------------------------------- */
@mixin create-xs-column($columns) {
    position: relative;
    width: percentage(($columns / $grid-columns));
    min-height: 1px;
    padding-left:  ($grid-gutter / 2);
    padding-right: ($grid-gutter / 2);
    float: left;
}

@mixin create-xs-column-offset($columns) {
    margin-left: percentage(($columns / $grid-columns));
}
@mixin create-xs-column-push($columns) {
    left: percentage(($columns / $grid-columns));
}
@mixin create-xs-column-pull($columns) {
    right: percentage(($columns / $grid-columns));
}

/* Create small columns
------------------------------------------------------------------------- */
@mixin create-sm-column($columns) {
    position: relative;
    min-height: 1px;
    padding-left:  ($grid-gutter / 2);
    padding-right: ($grid-gutter / 2);

    @media (min-width: $screen-sm) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}

@mixin create-sm-column-offset($columns) {
    @media (min-width: $screen-sm) {
        margin-left: percentage(($columns / $grid-columns));
    }
}
@mixin create-sm-column-push($columns) {
    @media (min-width: $screen-sm) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin create-sm-column-pull($columns) {
    @media (min-width: $screen-sm) {
        right: percentage(($columns / $grid-columns));
    }
}

/* Create medium columns
------------------------------------------------------------------------- */
@mixin create-md-column($columns) {
    position: relative;
    min-height: 1px;
    padding-left:  ($grid-gutter / 2);
    padding-right: ($grid-gutter / 2);

    @media (min-width: $screen-md) {
        width: percentage(($columns / $grid-columns));
        float: left;
    }
}

@mixin create-md-column-offset($columns) {
    @media (min-width: $screen-md) {
        margin-left: percentage(($columns / $grid-columns));
    }
}

@mixin create-md-column-push($columns) {
    @media (min-width: $screen-md) {
        left: percentage(($columns / $grid-columns));
    }
}

@mixin create-md-column-pull($columns) {
    @media (min-width: $screen-md) {
        right: percentage(($columns / $grid-columns));
    }
}

/* Create large columns
------------------------------------------------------------------------- */
@mixin create-lg-column($columns) {
    position: relative;
    min-height: 1px;
    padding-left:  ($grid-gutter / 2);
    padding-right: ($grid-gutter / 2);

    @media (min-width: $screen-lg) {
        width: percentage(($columns / $grid-columns));
        float: left;
    }
}

@mixin create-lg-column-offset($columns) {
    @media (min-width: $screen-lg) {
        margin-left: percentage(($columns / $grid-columns));
    }
}

@mixin create-lg-column-push($columns) {
    @media (min-width: $screen-lg) {
        left: percentage(($columns / $grid-columns));
    }
}

@mixin create-lg-column-pull($columns) {
    @media (min-width: $screen-lg) {
        right: percentage(($columns / $grid-columns));
    }
}

/* Create grid for specifict classes
------------------------------------------------------------------------- */
@mixin create-grid($class) {
    @include float-columns($class);
    @include loop-columns($grid-columns, $class, width);
    @include loop-columns($grid-columns, $class, pull);
    @include loop-columns($grid-columns, $class, push);
    @include loop-columns($grid-columns, $class, offset);
}


/* Grid
========================================================================================= */

/* Include core classes
------------------------------------------------------------------------- */
@include create-row;
@include create-columns;

/* Include grid per media queries
------------------------------------------------------------------------- */
@include create-grid(xs);

@media (min-width: $screen-sm) {
    @include create-grid(sm);
}

@media (min-width: $screen-md) {
    @include create-grid(md);
}

@media (min-width: $screen-lg) {
    @include create-grid(lg);
}